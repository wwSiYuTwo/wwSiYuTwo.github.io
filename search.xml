<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis常用注解</title>
      <link href="/2020/07/16/mybatis-chang-yong-zhu-jie/"/>
      <url>/2020/07/16/mybatis-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis常用注解主要分为三大类"><a href="#MyBatis常用注解主要分为三大类" class="headerlink" title="MyBatis常用注解主要分为三大类"></a>MyBatis常用注解主要分为三大类</h1><h2 id="SQL语句映射"><a href="#SQL语句映射" class="headerlink" title="SQL语句映射"></a>SQL语句映射</h2><p><strong>@Insert</strong>：实现新增功能  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(id,name) values(#{id},#{name})"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>@Select注解</strong>：实现查询功能  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"Select * from user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@SelectKey注解</strong>：插入后，获取id的值<br>以mysql为例，mysql在插入一条数据后，如何能获得到这个自增id的值呢？使用select last_insert_id() 可以取到最后生成的主键。  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(id,name) values(#{id},#{name})"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SelectKey</span><span class="token punctuation">(</span>statement <span class="token operator">=</span> <span class="token string">"select last_insert_id()"</span> <span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>keyColumn <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>resultType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>before <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@Insert注解</strong>：实现插入功能  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user(name,sex,age) values(#{name},#{sex},#{age}"</span><span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>@Update注解</strong>：实现更新功能  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update user set name= #{name},sex = #{sex},age =#{age} where id = #{id}"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">updateUserById</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>@Delete注解</strong>：实现删除功能  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from  user  where id =#{id}"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h2><p><strong>@Result，@Results，@ResultMap是结果集映射的三大注解。</strong>  </p><p>首先说明一下@Results各个属性的含义，id为当前结果集声明唯一标识，value值为结果集映射关系，@Result代表一个字段的映射关系，column指定数据库字段的名称，property指定实体类属性的名称，jdbcType数据库字段类型，@Result里的id值为true表明主键，默认false；使用@ResultMap来引用映射结果集，其中value可省略。  </p><p><strong>声明结果集映射关系代码：</strong>  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"select id, name, class_id from student"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">"studentMap"</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span> jdbcType<span class="token operator">=</span>JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span> jdbcType<span class="token operator">=</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"class_id "</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"classId"</span><span class="token punctuation">,</span> jdbcType<span class="token operator">=</span>JdbcType<span class="token punctuation">.</span>INTEGER<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用结果集代码：</strong>  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"select id, name, class_id from student where id = #{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"studentMap"</span><span class="token punctuation">)</span>Student <span class="token function">selectById</span><span class="token punctuation">(</span>integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就不用每次需要声明结果集映射的时候都复制冗余代码，简化开发，提高了代码的复用性。  </p><h2 id="关系映射"><a href="#关系映射" class="headerlink" title="关系映射"></a>关系映射</h2><p><strong>@one注解</strong>：用于一对一关系映射  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from student"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"age"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"address"</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"address_id"</span><span class="token punctuation">,</span>one<span class="token operator">=</span><span class="token annotation punctuation">@One</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"cn.mybatis.mydemo.mappers.AddressMapper.getAddress"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getAllStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@many注解</strong>：用于一对多关系映射  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from t_class where id=#{id}"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"class_name"</span><span class="token punctuation">,</span>property<span class="token operator">=</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property<span class="token operator">=</span><span class="token string">"students"</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token string">"cn.mybatis.mydemo.mappers.StudentMapper.getStudentsByClassId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Class <span class="token class-name">getClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring常用注解</title>
      <link href="/2020/07/16/spring-chang-yong-zhu-jie/"/>
      <url>/2020/07/16/spring-chang-yong-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring部分"><a href="#Spring部分" class="headerlink" title="Spring部分"></a>Spring部分</h1><ol><li><p><strong>声明bean的注解</strong><br> @Component 组件，没有明确的角色</p><p> @Service 在业务逻辑层使用（service层）</p><p> @Repository 在数据访问层使用（dao层）</p><p> @Controller 在展现层使用，控制器的声明（C）</p></li><li><p><strong>注入bean的注解</strong><br> @Autowired：由Spring提供</p><p> @Inject：由JSR-330提供</p><p> @Resource：由JSR-250提供</p></li><li><p><strong>java配置类相关注解</strong><br> @Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）  </p><p> @Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）  </p><p> @Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）  </p><p> @ComponentScan 用于对Component进行扫描，相当于xml中的（类上）  </p><p> @WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p></li><li><p><strong>切面（AOP）相关注解</strong><br> Spring支持AspectJ的注解式切面编程。 </p><p> @Aspect 声明一个切面（类上）  </p><p> 使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。  </p><p> @After 在方法执行之后执行（方法上）  </p><p> @Before 在方法执行之前执行（方法上）  </p><p> @Around 在方法执行之前与之后执行（方法上）  </p><p> @PointCut 声明切点  </p></li><li><p><strong>@Bean的属性支持</strong><br> @Scope 设置Spring容器如何新建Bean实例（方法上，得有@Bean）  </p><pre><code> 其设置类型包括：   Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）,   Protetype （每次调用新建一个bean）,   Request （web项目中，给每个http request新建一个bean）,   Session （web项目中，给每个http session新建一个bean）,   GlobalSession（给每一个 global http session新建一个Bean实例）  </code></pre><p> @StepScope 在Spring Batch中还有涉及  </p><p> @PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod  </p><p> @PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod  </p></li><li><p><strong>@Value注解</strong><br>@Value 为属性注入值（属性上）<br>支持如下方式的注入： </p><p> <font color="green">注入普通字符:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"Michael Jackson"</span><span class="token punctuation">)</span> String name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入操作系统属性:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{systemProperties['os.name']}"</span><span class="token punctuation">)</span> String osName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入表达式结果:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{ T(java.lang.Math).random() * 100}"</span><span class="token punctuation">)</span> String randomNumber<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入其它bean属性:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{domeClass.name}"</span><span class="token punctuation">)</span> String name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入文件资源:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"classPath:com/siyu/hello/test.txt"</span><span class="token punctuation">)</span> String Resource file<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入网站资源:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span> String url<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <font color="green">注入配置文件:</font></p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${bock.name}"</span><span class="token punctuation">)</span> String bookName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <strong>注入配置使用方法:</strong><br> ① 编写配置文件（test.properties）</p><pre><code> book.name=《三体》</code></pre><p> ② @PropertySource 加载配置文件(类上)  </p><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:com/siyu/hello/test.propertie"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> ③ 还需配置一个   PropertySourcesPlaceholderConfigurer的bean。  </p></li><li><p><strong>环境切换</strong><br> @Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）  </p><p> @Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）  </p></li><li><p><strong>异步相关</strong><br> @EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）  </p><p> @Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p></li><li><p><strong>定时任务相关</strong><br> @EnableScheduling 在配置类上使用，开启计划任务的支持（类上）  </p><p> @Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p></li><li><p><strong>@Enable*注解说明</strong><br>这些注解主要用来开启对xxx的支持  </p><p>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p><p>@EnableAsync 开启异步方法的支持</p><p>@EnableScheduling 开启计划任务的支持</p><p>@EnableWebMvc 开启Web MVC的配置支持</p><p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p><p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableCaching 开启注解式的缓存支持  </p></li><li><p>测试相关注解  </p><p>@RunWith 运行器，Spring中通常用于对JUnit的支持  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span>calss<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes<span class="token operator">=</span><span class="token punctuation">{</span>TestConfig<span class="token punctuation">.</span>calss<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="SpringMVC部分"><a href="#SpringMVC部分" class="headerlink" title="SpringMVC部分"></a>SpringMVC部分</h1><pre><code>@EnableWebMvc 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。  @Controller 声明该类为SpringMVC中的Controller  @RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）  @ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）  @RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）  @PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。  @RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。  @ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上，这对所有注解了 @RequestMapping的控制器内的方法有效。  @ExceptionHandler 用于全局处理控制器里的异常  @InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。  @ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。  </code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA NIO</title>
      <link href="/2020/05/31/java-nio/"/>
      <url>/2020/05/31/java-nio/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h1><h2 id="NIO-主要有三大核心部分：Channel-通道-，Buffer-缓冲区-Selector。"><a href="#NIO-主要有三大核心部分：Channel-通道-，Buffer-缓冲区-Selector。" class="headerlink" title="NIO 主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。"></a>NIO 主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。</h2><p><font color="gree">传统 IO 基于字节流和字<br>符流进行操作，而 NIO 基于 Channel 和 Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区<br>中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，<br>数据到达）。因此，单个线程可以监听多个数据通道。</font>  </p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2020/05/31/4XIkbVDzmc9rS5R.png" alt="">  </p><h2 id="NIO-的缓冲区"><a href="#NIO-的缓冲区" class="headerlink" title="NIO 的缓冲区"></a>NIO 的缓冲区</h2><p>Java IO 面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何<br>地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓<br>存到一个缓冲区。NIO 的缓冲导向方法不同。数据读取到一个它稍后处理的缓冲区，需要时可在<br>缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所<br>有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的<br>数据  </p><h2 id="NIO-的非阻塞"><a href="#NIO-的非阻塞" class="headerlink" title="NIO 的非阻塞"></a>NIO 的非阻塞</h2><p>IO 的各种流是阻塞的。这意味着，当一个线程调用 read() 或 write()时，该线程被阻塞，直到有<br>一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 NIO 的非阻塞模式，<br>使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可<br>用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以<br>继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它<br>完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞 IO 的空闲时间用于在其它通道上<br>执行 IO 操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2020/05/31/sGZJaHuhX7MFmkn.png" alt="">  </p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p>首先说一下 Channel，国内大多翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不多一个<br>等级的。只不过 Stream 是单向的，譬如：InputStream, OutputStream，而 Channel 是双向<br>的，既可以用来进行读操作，又可以用来进行写操作。<br>NIO 中的 Channel 的主要实现有：  <font color="green"></font></p><ol><li>FileChannel</li><li>DatagramChannel  </li><li>SocketChannel</li><li>ServerSocketChannel</li></ol><p>这里看名字就可以猜出个所以然来：分别可以对应文件 IO、UDP 和 TCP（Server 和 Client）。<br>下面演示的案例基本上就是围绕这 4 个类型的 Channel 进行陈述的。  </p><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Buffer，故名思意，缓冲区，实际上是一个容器，是一个连续数组。Channel 提供从文件、<br>网络读取数据的渠道，但是读取或写入的数据都必须经由 Buffer。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.loli.net/2020/05/31/Psegqak38wvIbnp.png" alt="">  </p><p>上面的图描述了从一个客户端向服务端发送数据，然后服务端接收数据的过程。客户端发送<br>数据时，必须先将数据存入 Buffer 中，然后将 Buffer 中的内容写入通道。服务端这边接收数据必须通过 Channel 将数据读入到 Buffer 中，然后再从 Buffer 中取出数据来处理。  </p><p>在 NIO 中，Buffer 是一个顶层父类，它是一个抽象类，常用的 Buffer 的子类有：<br>ByteBuffer、IntBuffer、 CharBuffer、 LongBuffer、 DoubleBuffer、FloatBuffer、<br>ShortBuffe  </p><h2 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h2><p>Selector 类是 NIO 的核心类，Selector 能够检测多个注册的通道上是否有事件发生，如果有事<br>件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可<br>以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用<br>函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护<br>多个线程，并且避免了多线程之间的上下文切换导致的开销。  </p><hr><p><strong>完结…</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> NIO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简历</title>
      <link href="/2020/05/31/zheng-zhou-xi-ya-si-guo-ji-xue-yuan-wang-si-yu-java-gong-cheng-shi/"/>
      <url>/2020/05/31/zheng-zhou-xi-ya-si-guo-ji-xue-yuan-wang-si-yu-java-gong-cheng-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="王思宇"><a href="#王思宇" class="headerlink" title="王思宇"></a>王思宇</h1><ul><li><p><strong>男 21 岁</strong>   (1999 年 1 月)</p></li><li><p><strong>郑州西亚斯国际学院 电子信息工程 本科 在读大三</strong></p></li><li><p><strong>邮箱：</strong> 1446593786@qq.com</p></li><li><p><strong>个人博客：<a href="https://wwsiyu.github.io/" target="_blank" rel="noopener">https://wwsiyu.github.io/</a></strong></p></li><li><p><strong>求职意向:</strong>  Java 实习生</p></li></ul><h2 id="教育背景："><a href="#教育背景：" class="headerlink" title="教育背景："></a>教育背景：</h2><p><strong>郑州西亚斯国际学院 本科 2017 年 9 月 — 2021 年 6 月   专业：电子信息工程</strong>  </p><h2 id="个人能力及特长："><a href="#个人能力及特长：" class="headerlink" title="个人能力及特长："></a><strong><em>个人能力及特长：</em></strong></h2><ul><li>熟悉 Java基础； </li><li>了解JVM 虚拟机的内存模型以及垃圾回收器；</li><li>了解 Java 多线程与锁以及集合概念；</li><li>掌握Spring、SpringMVC、Mybatis、Hibernate 等主流框架集成使用；</li><li>熟悉 MySQL 关系型数据库操作，索引机制，了解 Sql 优化，以及分库分表，主从复制；</li><li>了解 NoSQL Redis 非关系型据库操作；</li><li>熟悉基本数据结构与算法；</li><li>熟悉 Maven 项目管理工具，了解 Git 版本控制工具以及docker容器</li><li>了解基本的 Linux 操作系统基本操作命令; </li><li>使用过 SpringBoot，SpringCloud；</li></ul><h2 id="项目经历："><a href="#项目经历：" class="headerlink" title="项目经历："></a>项目经历：</h2><p>2020.03 — 2020.06<br><strong>项目名称</strong>：谷粒商城后台管理系统</p><ul><li><strong>项目使用:</strong> SpringBoot、SpringCloud Alibaba、Mybatis、docker等。</li><li><strong>主要模块有:</strong> 商品、购物车、订单、库存等。</li><li><strong>技术难点：</strong>基于人人开源实现对后台商品的维护； 实现前后端分离；基于springCloud实现为微服务的开发；将前端发送的数据与数据库中存储的数据进行交互；使用nacos实现服务的注册发现和配置；使用gateway对请求进行过滤、路由等；使用JSR303进行实现后端的校验；以及openFeign实现远程调用。</li><li><strong>项目心得</strong>：该项目几乎将之前学到的知识全部用了一遍，对微服务有了更深一层的了解。更深刻的理解了面向接口编程。学到了如何对后台数据进行更好的维护。此间也发现了自己较对的薄弱点，这对以后的学习重点以及方式有了很大的帮助。</li></ul><h2 id="校园经历："><a href="#校园经历：" class="headerlink" title="校园经历："></a>校园经历：</h2><p><strong>2018.9 — 2020.4 |加入学校软件工作室学习 Java。</strong></p><h2 id="所获奖励："><a href="#所获奖励：" class="headerlink" title="所获奖励："></a>所获奖励：</h2><p> <strong>- 大学生创新项目证书</strong></p><h2 id="自我评价："><a href="#自我评价：" class="headerlink" title="自我评价："></a>自我评价：</h2><p> 热爱编程；自学能力强有单独解决问题的能力；有很好的团队协作能力；性格开朗；抗压能力强；具有合格的时间管理理念。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
